# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hdl_people_tracking/Track.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hdl_people_tracking.msg

class Track(genpy.Message):
  _md5sum = "d83e95598dbec66cab50a208fafde776"
  _type = "hdl_people_tracking/Track"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id
float64 age
geometry_msgs/Point pos
geometry_msgs/Vector3 vel

float64[9] pos_cov
float64[9] vel_cov

int64 k
int64[] ids

hdl_people_tracking/Cluster[] associated

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: hdl_people_tracking/Cluster
bool is_human

geometry_msgs/Point min_pt
geometry_msgs/Point max_pt
geometry_msgs/Vector3 size
geometry_msgs/Point centroid
"""
  __slots__ = ['id','age','pos','vel','pos_cov','vel_cov','k','ids','associated']
  _slot_types = ['int32','float64','geometry_msgs/Point','geometry_msgs/Vector3','float64[9]','float64[9]','int64','int64[]','hdl_people_tracking/Cluster[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,age,pos,vel,pos_cov,vel_cov,k,ids,associated

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Track, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.age is None:
        self.age = 0.
      if self.pos is None:
        self.pos = geometry_msgs.msg.Point()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      if self.pos_cov is None:
        self.pos_cov = [0.] * 9
      if self.vel_cov is None:
        self.vel_cov = [0.] * 9
      if self.k is None:
        self.k = 0
      if self.ids is None:
        self.ids = []
      if self.associated is None:
        self.associated = []
    else:
      self.id = 0
      self.age = 0.
      self.pos = geometry_msgs.msg.Point()
      self.vel = geometry_msgs.msg.Vector3()
      self.pos_cov = [0.] * 9
      self.vel_cov = [0.] * 9
      self.k = 0
      self.ids = []
      self.associated = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i7d().pack(_x.id, _x.age, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z))
      buff.write(_get_struct_9d().pack(*self.pos_cov))
      buff.write(_get_struct_9d().pack(*self.vel_cov))
      _x = self.k
      buff.write(_get_struct_q().pack(_x))
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.ids))
      length = len(self.associated)
      buff.write(_struct_I.pack(length))
      for val1 in self.associated:
        _x = val1.is_human
        buff.write(_get_struct_B().pack(_x))
        _v1 = val1.min_pt
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.max_pt
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = val1.size
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.centroid
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos is None:
        self.pos = geometry_msgs.msg.Point()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      if self.associated is None:
        self.associated = None
      end = 0
      _x = self
      start = end
      end += 60
      (_x.id, _x.age, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z,) = _get_struct_i7d().unpack(str[start:end])
      start = end
      end += 72
      self.pos_cov = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.vel_cov = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 8
      (self.k,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ids = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.associated = []
      for i in range(0, length):
        val1 = hdl_people_tracking.msg.Cluster()
        start = end
        end += 1
        (val1.is_human,) = _get_struct_B().unpack(str[start:end])
        val1.is_human = bool(val1.is_human)
        _v5 = val1.min_pt
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.max_pt
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v7 = val1.size
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.centroid
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.associated.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i7d().pack(_x.id, _x.age, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z))
      buff.write(self.pos_cov.tostring())
      buff.write(self.vel_cov.tostring())
      _x = self.k
      buff.write(_get_struct_q().pack(_x))
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.ids.tostring())
      length = len(self.associated)
      buff.write(_struct_I.pack(length))
      for val1 in self.associated:
        _x = val1.is_human
        buff.write(_get_struct_B().pack(_x))
        _v9 = val1.min_pt
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.max_pt
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = val1.size
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.centroid
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos is None:
        self.pos = geometry_msgs.msg.Point()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      if self.associated is None:
        self.associated = None
      end = 0
      _x = self
      start = end
      end += 60
      (_x.id, _x.age, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z,) = _get_struct_i7d().unpack(str[start:end])
      start = end
      end += 72
      self.pos_cov = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.vel_cov = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 8
      (self.k,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ids = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.associated = []
      for i in range(0, length):
        val1 = hdl_people_tracking.msg.Cluster()
        start = end
        end += 1
        (val1.is_human,) = _get_struct_B().unpack(str[start:end])
        val1.is_human = bool(val1.is_human)
        _v13 = val1.min_pt
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.max_pt
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v15 = val1.size
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.centroid
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.associated.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i7d = None
def _get_struct_i7d():
    global _struct_i7d
    if _struct_i7d is None:
        _struct_i7d = struct.Struct("<i7d")
    return _struct_i7d
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
